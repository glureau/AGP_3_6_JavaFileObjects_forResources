import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.glureau.agp_3_6_javafileobjects_forresources"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    defaultConfig.javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    testImplementation files(getRuntimeJar())
    //testImplementation files(Jvm.current().getToolsJar())
    testImplementation 'com.google.testing.compile:compile-testing:0.18'
}

static def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
        File runtimeJar = new File(javaBase, "lib/rt.jar")
        if (runtimeJar.exists()) {
            return runtimeJar
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar")
        return runtimeJar.exists() ? runtimeJar : null
    } catch (IOException e) {
        throw new RuntimeException(e)
    }
}

task('copyDebugTestResources', type: Copy) {
    from("${projectDir}/src/test/resources")
    into("${buildDir}/intermediates/sourceFolderJavaResources/debug")
}
preBuild.dependsOn copyDebugTestResources
